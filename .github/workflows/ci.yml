name: Build, Test, and Deploy to EC2

on:
  push:
    branches: ["oscarwanga98-patch-1"]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  USERNAME: ec2-user
  IMAGE_NAME: my-app
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npx vitest run tests/simple-unit.test.ts tests/integration.test.ts --coverage

      - name: Run headless E2E tests
        run: npx vitest run tests/e2e-headless.test.ts

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run browser E2E tests
        run: npx playwright test

  build-push:
    needs: test
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    needs: build-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ env.AWS_REGION }}.compute.amazonaws.com >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          # Pull the Docker image on EC2
          ssh -o StrictHostKeyChecking=no ${{ env.USERNAME }}@${{ env.EC2_INSTANCE_ID }} \
            "docker pull ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

          # Stop and remove old container
          ssh ${{ env.USERNAME }}@${{ env.EC2_INSTANCE_ID }} \
            "docker stop ${{ env.IMAGE_NAME }} || true && docker rm ${{ env.IMAGE_NAME }} || true"

          # Run new container
          ssh ${{ env.USERNAME }}@${{ env.EC2_INSTANCE_ID }} \
            "docker run -d --name ${{ env.IMAGE_NAME }} \
            -p 80:3000 \
            --restart unless-stopped \
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

      - name: Verify deployment
        run: |
          sleep 10 # Wait for container to start
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.EC2_INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          curl -sSf http://$INSTANCE_IP/health || exit 1
